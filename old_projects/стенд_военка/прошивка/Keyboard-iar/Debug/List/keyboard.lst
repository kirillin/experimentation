###############################################################################
#                                                                             #
#                                                       10/Mar/2010  15:05:38 #
# IAR Atmel AVR C/C++ Compiler V5.11A/W32, Evaluation Version                 #
# Copyright 1996-2008 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Source file  =  H:\сайт\заготовки\опрос клавиатуры\Keyboard\keyboard.c   #
#    Command line =  "H:\сайт\заготовки\опрос клавиатуры\Keyboard\keyboard.c" #
#                     --cpu=m8 -ms -o "H:\сайт\заготовки\опрос                #
#                    клавиатуры\Keyboard\Debug\Obj\" -lCN                     #
#                    "H:\сайт\заготовки\опрос клавиатуры\Keyboard\Debug\List\ #
#                    " --initializers_in_flash -z2 --no_cse --no_inline       #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    "D:\IAR Systems\Embedded Workbench 5.0                   #
#                    Evaluation\avr\INC\" -I "D:\IAR Systems\Embedded         #
#                    Workbench 5.0 Evaluation\avr\INC\CLIB\" --eeprom_size    #
#                    512                                                      #
#    List file    =  H:\сайт\заготовки\опрос клавиатуры\Keyboard\Debug\List\k #
#                    eyboard.lst                                              #
#    Object file  =  H:\сайт\заготовки\опрос клавиатуры\Keyboard\Debug\Obj\ke #
#                    yboard.r90                                               #
#                                                                             #
#                                                                             #
###############################################################################

H:\сайт\заготовки\опрос клавиатуры\Keyboard\keyboard.c
      1          #include "keyboard.h"

   \                                 In  segment ABSOLUTE, at 0x31
   \   <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   <unnamed> volatile __io _A_PINC
   \                     _A_PINC:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS 1
      2          
      3          //хранит текущее состояние автомата

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          unsigned char keyState;
   \                     keyState:
   \   00000000                      DS 1
      5          //хранит код нажатой кнопки

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          unsigned char keyCode;
   \                     keyCode:
   \   00000000                      DS 1
      7          //хранит символьное значение нажатой кнопки

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          unsigned char keyValue;
   \                     keyValue:
   \   00000000                      DS 1
      9          //флаговая переменная - устанавливается, если кнопка удерживается

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     10          unsigned char keyDown;
   \                     keyDown:
   \   00000000                      DS 1
     11          //флаговая переменная -  устанавливается, когда нажата новая кнопка

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     12          unsigned char keyNew;
   \                     keyNew:
   \   00000000                      DS 1
     13          
     14          //таблица перекодировки

   \                                 In  segment NEAR_F, align 1, keep-with-next
     15          __flash unsigned char keyTable[][2] = { 
   \                     keyTable:
   \   00000000   311132123314       DB 17, 49, 18, 50, 20, 51, 33, 52, 34, 53, 36, 54, 65, 55, 66, 56, 68
   \              342135223624
   \              3741384244  
   \   00000011   8139822A8430       DB 57, 129, 42, 130, 48, 132, 35
   \              23          
     16          { 0x11, '1'},
     17          { 0x12, '2'},
     18          { 0x14, '3'},
     19          { 0x21, '4'},
     20          { 0x22, '5'},
     21          { 0x24, '6'},
     22          { 0x41, '7'},
     23          { 0x42, '8'},
     24          { 0x44, '9'},
     25          { 0x81, '*'},
     26          { 0x82, '0'},
     27          { 0x84, '#'}
     28          };
     29          
     30          //прототипы функций используемых автоматом
     31          unsigned char AnyKey(void);
     32          unsigned char SameKey(void);
     33          void ScanKey(void);
     34          unsigned char FindKey(void);
     35          void ClearKey(void);
     36          
     37          //инициализация портов, обнуление переменных

   \                                 In  segment CODE, align 2, keep-with-next
     38          void InitKeyboard(void)
   \                     InitKeyboard:
     39          {
     40            DDRD |= 0xf0;
   \   00000000   B301               IN      R16, 0x11
   \   00000002   6F00               ORI     R16, 0xF0
   \   00000004   BB01               OUT     0x11, R16
     41            PORTD &= 0x0f;
   \   00000006   B302               IN      R16, 0x12
   \   00000008   700F               ANDI    R16, 0x0F
   \   0000000A   BB02               OUT     0x12, R16
     42            DDRC &= ~0x07;
   \   0000000C   B304               IN      R16, 0x14
   \   0000000E   7F08               ANDI    R16, 0xF8
   \   00000010   BB04               OUT     0x14, R16
     43            PORTC &= ~0x07;
   \   00000012   B305               IN      R16, 0x15
   \   00000014   7F08               ANDI    R16, 0xF8
   \   00000016   BB05               OUT     0x15, R16
     44            
     45            keyState = 0;
   \   00000018   E000               LDI     R16, 0
   \   0000001A   9300....           STS     keyState, R16
     46            keyCode = 0;
   \   0000001E   E000               LDI     R16, 0
   \   00000020   9300....           STS     keyCode, R16
     47            keyValue = 0;
   \   00000024   E000               LDI     R16, 0
   \   00000026   9300....           STS     keyValue, R16
     48            keyDown = 0;
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   9300....           STS     keyDown, R16
     49            keyNew = 0;
   \   00000030   E000               LDI     R16, 0
   \   00000032   9300....           STS     keyNew, R16
     50          }
   \   00000036   9508               RET
   \   00000038                      REQUIRE _A_DDRD
   \   00000038                      REQUIRE _A_PORTD
   \   00000038                      REQUIRE _A_DDRC
   \   00000038                      REQUIRE _A_PORTC
     51          
     52          //автомат реализующий опрос клавиатуры, защиту от дребезга
     53          // и распознование нажатой кнопки

   \                                 In  segment CODE, align 2, keep-with-next
     54          void ScanKeyboard(void)
   \                     ScanKeyboard:
     55          {
     56             switch (keyState){
   \   00000000   9100....           LDS     R16, keyState
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F039               BREQ    ??ScanKeyboard_0
   \   00000008   950A               DEC     R16
   \   0000000A   F069               BREQ    ??ScanKeyboard_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F0B9               BREQ    ??ScanKeyboard_2
   \   00000010   950A               DEC     R16
   \   00000012   F0E1               BREQ    ??ScanKeyboard_3
   \   00000014   9508               RET
     57               case 0: 
     58                 if (AnyKey()) {
   \                     ??ScanKeyboard_0:
   \   00000016   ....               RCALL   AnyKey
   \   00000018   2300               TST     R16
   \   0000001A   F119               BREQ    ??ScanKeyboard_4
     59                   ScanKey();
   \   0000001C   ....               RCALL   ScanKey
     60                   keyState = 1;
   \   0000001E   E001               LDI     R16, 1
   \   00000020   9300....           STS     keyState, R16
   \   00000024   9508               RET
     61                 }
     62                 break;
     63          
     64               case 1: 
     65                 if (SameKey()) {
   \                     ??ScanKeyboard_1:
   \   00000026   ....               RCALL   SameKey
   \   00000028   2300               TST     R16
   \   0000002A   F029               BREQ    ??ScanKeyboard_5
     66                     FindKey();
   \   0000002C   ....               RCALL   FindKey
     67                     keyState = 2;
   \   0000002E   E002               LDI     R16, 2
   \   00000030   9300....           STS     keyState, R16
   \   00000034   9508               RET
     68                 }
     69                 else keyState = 0;
   \                     ??ScanKeyboard_5:
   \   00000036   E000               LDI     R16, 0
   \   00000038   9300....           STS     keyState, R16
   \   0000003C   9508               RET
     70                 break;
     71               
     72               case 2: 
     73                  if (SameKey()){}
   \                     ??ScanKeyboard_2:
   \   0000003E   ....               RCALL   SameKey
   \   00000040   2300               TST     R16
   \   00000042   F479               BRNE    ??ScanKeyboard_4
     74                  else keyState = 3;
   \   00000044   E003               LDI     R16, 3
   \   00000046   9300....           STS     keyState, R16
   \   0000004A   9508               RET
     75                  break;
     76              
     77               case 3: 
     78                 if (SameKey()) {
   \                     ??ScanKeyboard_3:
   \   0000004C   ....               RCALL   SameKey
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??ScanKeyboard_6
     79                   keyState = 2;
   \   00000052   E002               LDI     R16, 2
   \   00000054   9300....           STS     keyState, R16
   \   00000058   9508               RET
     80                 }
     81                 else {
     82                   ClearKey();
   \                     ??ScanKeyboard_6:
   \   0000005A   ....               RCALL   ClearKey
     83                   keyState = 0;
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   9300....           STS     keyState, R16
     84                 }
     85                 break;
     86               
     87               default:
     88                  break;
     89             }
     90             
     91          }
   \                     ??ScanKeyboard_4:
   \   00000062   9508               RET
     92          
     93          //возвращает true если какая-нибудь кнопка нажата

   \                                 In  segment CODE, align 2, keep-with-next
     94          unsigned char AnyKey(void) 
   \                     AnyKey:
     95          {
     96            PORTD |= 0xf0;
   \   00000000   B302               IN      R16, 0x12
   \   00000002   6F00               ORI     R16, 0xF0
   \   00000004   BB02               OUT     0x12, R16
     97            return (PINC & 0x07);
   \   00000006   B303               IN      R16, 0x13
   \   00000008   7007               ANDI    R16, 0x07
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_PORTD
   \   0000000C                      REQUIRE _A_PINC
     98          }
     99          
    100          // возвращает true если удерживается та же кнопка
    101          //что и в предыдущем цикле опроса

   \                                 In  segment CODE, align 2, keep-with-next
    102          unsigned char SameKey(void) 
   \                     SameKey:
    103          {
    104            PORTD = (PORTD & 0x0f) | ( keyCode & 0xf0);
   \   00000000   B312               IN      R17, 0x12
   \   00000002   701F               ANDI    R17, 0x0F
   \   00000004   9100....           LDS     R16, keyCode
   \   00000008   7F00               ANDI    R16, 0xF0
   \   0000000A   2B10               OR      R17, R16
   \   0000000C   BB12               OUT     0x12, R17
    105            return ((PINC & keyCode) & 0x07);
   \   0000000E   B303               IN      R16, 0x13
   \   00000010   9110....           LDS     R17, keyCode
   \   00000014   2301               AND     R16, R17
   \   00000016   7007               ANDI    R16, 0x07
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_PORTD
   \   0000001A                      REQUIRE _A_PINC
    106          }
    107          
    108          //Генерирует нужные сигналы на линиях
    109          //считывает код нажатой кнопки

   \                                 In  segment CODE, align 2, keep-with-next
    110          void ScanKey(void) 
   \                     ScanKey:
    111          {
    112            unsigned char activeRow = (1<<4);
   \   00000000   E110               LDI     R17, 16
    113            while (activeRow) {
   \                     ??ScanKey_0:
   \   00000002   2311               TST     R17
   \   00000004   F0A9               BREQ    ??ScanKey_1
    114              PORTD = (PORTD & 0x0f)|activeRow;
   \   00000006   B302               IN      R16, 0x12
   \   00000008   700F               ANDI    R16, 0x0F
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   BB02               OUT     0x12, R16
    115              if (PINC & 0x07) {
   \   0000000E   B303               IN      R16, 0x13
   \   00000010   7007               ANDI    R16, 0x07
   \   00000012   2300               TST     R16
   \   00000014   F059               BREQ    ??ScanKey_2
    116                keyCode = (PINC & 0x07);
   \   00000016   B303               IN      R16, 0x13
   \   00000018   7007               ANDI    R16, 0x07
   \   0000001A   9300....           STS     keyCode, R16
    117                keyCode |= (PORTD & 0xf0);
   \   0000001E   B302               IN      R16, 0x12
   \   00000020   7F00               ANDI    R16, 0xF0
   \   00000022   ....               LDI     R30, LOW(keyCode)
   \   00000024   ....               LDI     R31, (keyCode) >> 8
   \   00000026   8120               LD      R18, Z
   \   00000028   2B20               OR      R18, R16
   \   0000002A   8320               ST      Z, R18
    118              }
    119              activeRow <<= 1;
   \                     ??ScanKey_2:
   \   0000002C   0F11               LSL     R17
   \   0000002E   CFE9               RJMP    ??ScanKey_0
    120            }
    121          }
   \                     ??ScanKey_1:
   \   00000030   9508               RET
   \   00000032                      REQUIRE _A_PORTD
   \   00000032                      REQUIRE _A_PINC
    122          
    123          // преобразует код кнопки в соответствующий символ
    124          // устанавивает флаги

   \                                 In  segment CODE, align 2, keep-with-next
    125          unsigned char FindKey(void) 
   \                     FindKey:
    126          {
    127            unsigned char index;
    128            for (index = 0; index < 12; index++) {
   \   00000000   E020               LDI     R18, 0
   \                     ??FindKey_0:
   \   00000002   302C               CPI     R18, 12
   \   00000004   F500               BRCC    ??FindKey_1
    129              if (keyTable [index][0] == keyCode) {
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   0F00               LSL     R16
   \   0000000C   1F11               ROL     R17
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(keyTable) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(keyTable) & 0xFFFF) >> 8
   \   00000014   9104               LPM     R16, Z
   \   00000016   9110....           LDS     R17, keyCode
   \   0000001A   1701               CP      R16, R17
   \   0000001C   F491               BRNE    ??FindKey_2
    130                keyValue = keyTable [index][1];
   \   0000001E   2F02               MOV     R16, R18
   \   00000020   E010               LDI     R17, 0
   \   00000022   0F00               LSL     R16
   \   00000024   1F11               ROL     R17
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(keyTable + 1) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(keyTable + 1) & 0xFFFF))
   \   0000002C   9104               LPM     R16, Z
   \   0000002E   9300....           STS     keyValue, R16
    131                keyDown = 1;
   \   00000032   E001               LDI     R16, 1
   \   00000034   9300....           STS     keyDown, R16
    132                keyNew = 1;
   \   00000038   E001               LDI     R16, 1
   \   0000003A   9300....           STS     keyNew, R16
    133                return 1;
   \   0000003E   E001               LDI     R16, 1
   \   00000040   9508               RET
    134              }
    135            }
   \                     ??FindKey_2:
   \   00000042   9523               INC     R18
   \   00000044   CFDE               RJMP    ??FindKey_0
    136            return 0;
   \                     ??FindKey_1:
   \   00000046   E000               LDI     R16, 0
   \   00000048   9508               RET
    137          }
    138          
    139          //сбрасывает флаг 

   \                                 In  segment CODE, align 2, keep-with-next
    140          void ClearKey(void) 
   \                     ClearKey:
    141          {
    142            keyDown = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     keyDown, R16
    143          }
   \   00000006   9508               RET
    144          
    145          //если зафиксировано нажатие кнопки
    146          //возвращает ее код

   \                                 In  segment CODE, align 2, keep-with-next
    147          unsigned char GetKey(void)
   \                     GetKey:
    148          { 
    149            if (keyNew){
   \   00000000   9100....           LDS     R16, keyNew
   \   00000004   2300               TST     R16
   \   00000006   F031               BREQ    ??GetKey_0
    150              keyNew = 0;
   \   00000008   E000               LDI     R16, 0
   \   0000000A   9300....           STS     keyNew, R16
    151              return keyValue;
   \   0000000E   9100....           LDS     R16, keyValue
   \   00000012   9508               RET
    152            }
    153            else 
    154              return 0;
   \                     ??GetKey_0:
   \   00000014   E000               LDI     R16, 0
   \   00000016   9508               RET
    155          }

   Maximum stack usage in bytes:

     Function      CSTACK RSTACK
     --------      ------ ------
     AnyKey            0      2
     ClearKey          0      2
     FindKey           0      2
     GetKey            0      2
     InitKeyboard      0      2
     SameKey           0      2
     ScanKey           0      2
     ScanKeyboard      0      2
       -> AnyKey       0      2
       -> ScanKey      0      2
       -> SameKey      0      2
       -> FindKey      0      2
       -> SameKey      0      2
       -> SameKey      0      2
       -> ClearKey     0      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     _A_DDRD           1
     _A_PORTD          1
     _A_PINC           1
     _A_DDRC           1
     _A_PORTC          1
     keyState          1
     keyCode           1
     keyValue          1
     keyDown           1
     keyNew            1
     keyTable         24
     InitKeyboard     56
     ScanKeyboard    100
     AnyKey           12
     SameKey          26
     ScanKey          50
     FindKey          74
     ClearKey          8
     GetKey           24
      Others           6

 
   5 bytes in segment ABSOLUTE
 350 bytes in segment CODE
   6 bytes in segment INITTAB
  24 bytes in segment NEAR_F
   5 bytes in segment NEAR_Z
 
 374 bytes of CODE memory (+ 6 bytes shared)
   5 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
