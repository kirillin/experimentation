###############################################################################
#                                                                             #
#                                                       10/Mar/2010  15:05:37 #
# IAR Atmel AVR C/C++ Compiler V5.11A/W32, Evaluation Version                 #
# Copyright 1996-2008 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Source file  =  H:\сайт\заготовки\опрос клавиатуры\Keyboard\main.c       #
#    Command line =  "H:\сайт\заготовки\опрос клавиатуры\Keyboard\main.c"     #
#                    --cpu=m8 -ms -o "H:\сайт\заготовки\опрос                 #
#                    клавиатуры\Keyboard\Debug\Obj\" -lCN                     #
#                    "H:\сайт\заготовки\опрос клавиатуры\Keyboard\Debug\List\ #
#                    " --initializers_in_flash -z2 --no_cse --no_inline       #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    "D:\IAR Systems\Embedded Workbench 5.0                   #
#                    Evaluation\avr\INC\" -I "D:\IAR Systems\Embedded         #
#                    Workbench 5.0 Evaluation\avr\INC\CLIB\" --eeprom_size    #
#                    512                                                      #
#    List file    =  H:\сайт\заготовки\опрос клавиатуры\Keyboard\Debug\List\m #
#                    ain.lst                                                  #
#    Object file  =  H:\сайт\заготовки\опрос клавиатуры\Keyboard\Debug\Obj\ma #
#                    in.r90                                                   #
#                                                                             #
#                                                                             #
###############################################################################

H:\сайт\заготовки\опрос клавиатуры\Keyboard\main.c
      1          //***************************************************************************
      2          //
      3          //  Author(s)...: Pashgan    http://ChipEnable.Ru   
      4          //
      5          //  Target(s)...: ATMega8
      6          //
      7          //  Compiler....: IAR 5.11A
      8          //
      9          //  Description.: ќпрос матричной клавиатуры. »спользование конечного автомата.
     10          //
     11          //  Data........: 06.03.10 
     12          //
     13          //***************************************************************************
     14          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x29
   \   <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x40
   \   <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x52
   \   <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS 1
     15          #include <intrinsics.h>
     16          #include "keyboard.h"
     17          
     18          //отправка символа по usart`у

   \                                 In  segment CODE, align 2, keep-with-next
     19          void USART_SendChar(unsigned char sym)
   \                     USART_SendChar:
   \                     ??USART_SendChar_0:
     20          {
     21            while(!(UCSRA & (1<<UDRE)));
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??USART_SendChar_0
     22            UDR = sym;
   \   00000004   B90C               OUT     0x0C, R16
     23          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSRA
   \   00000008                      REQUIRE _A_UDR
     24          
     25          //прерывание таймера “0 - опрос клавиатуры
     26          #pragma vector = TIMER0_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     27          __interrupt void Timer0Ovf(void)
   \                     Timer0Ovf:
     28          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   93FA               ST      -Y, R31
   \   00000004   93EA               ST      -Y, R30
   \   00000006   923A               ST      -Y, R3
   \   00000008   922A               ST      -Y, R2
   \   0000000A   921A               ST      -Y, R1
   \   0000000C   920A               ST      -Y, R0
   \   0000000E   937A               ST      -Y, R23
   \   00000010   936A               ST      -Y, R22
   \   00000012   935A               ST      -Y, R21
   \   00000014   934A               ST      -Y, R20
   \   00000016   933A               ST      -Y, R19
   \   00000018   932A               ST      -Y, R18
   \   0000001A   931A               ST      -Y, R17
   \   0000001C   930A               ST      -Y, R16
   \   0000001E   B78F               IN      R24, 0x3F
     29             TCNT0 = 0x83;
   \   00000020   E803               LDI     R16, 131
   \   00000022   BF02               OUT     0x32, R16
     30             ScanKeyboard();   
   \   00000024   ....               RCALL   ScanKeyboard
     31          }
   \   00000026   BF8F               OUT     0x3F, R24
   \   00000028   9109               LD      R16, Y+
   \   0000002A   9119               LD      R17, Y+
   \   0000002C   9129               LD      R18, Y+
   \   0000002E   9139               LD      R19, Y+
   \   00000030   9149               LD      R20, Y+
   \   00000032   9159               LD      R21, Y+
   \   00000034   9169               LD      R22, Y+
   \   00000036   9179               LD      R23, Y+
   \   00000038   9009               LD      R0, Y+
   \   0000003A   9019               LD      R1, Y+
   \   0000003C   9029               LD      R2, Y+
   \   0000003E   9039               LD      R3, Y+
   \   00000040   91E9               LD      R30, Y+
   \   00000042   91F9               LD      R31, Y+
   \   00000044   9189               LD      R24, Y+
   \   00000046   9518               RETI
   \   00000048                      REQUIRE _A_TCNT0
     32          

   \                                 In  segment CODE, align 2, keep-with-next
     33          int main( void )
   \                     main:
     34          {
   \   00000000   938A               ST      -Y, R24
     35            unsigned char key;
     36            
     37            //инициализаци€ USART`a
     38            UBRRH = 0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   BD00               OUT     0x20, R16
     39            UBRRL = 51; //скорость обмена 9600 бод при Fcpu = 8M√ц
   \   00000006   E303               LDI     R16, 51
   \   00000008   B909               OUT     0x09, R16
     40            UCSRB = (1<<TXEN); // разр передачи.
   \   0000000A   E008               LDI     R16, 8
   \   0000000C   B90A               OUT     0x0A, R16
     41            UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разр€дов
   \   0000000E   E806               LDI     R16, 134
   \   00000010   BD00               OUT     0x20, R16
     42            
     43            //инициализаци€ таймера “0
     44            TIMSK = (1<<TOIE0); //разрешение прерывани€ по переполнению
   \   00000012   E001               LDI     R16, 1
   \   00000014   BF09               OUT     0x39, R16
     45            TCCR0 = (1<<CS02)|(0<<CS01)|(0<<CS00); //предделитель 256
   \   00000016   E004               LDI     R16, 4
   \   00000018   BF03               OUT     0x33, R16
     46            TCNT0 = 0x83; //прерывани€ каждые 4 мс
   \   0000001A   E803               LDI     R16, 131
   \   0000001C   BF02               OUT     0x32, R16
     47            
     48            //инициализаци€ портов и переменных 
     49            InitKeyboard();
   \   0000001E   ....               RCALL   InitKeyboard
     50            __enable_interrupt();
   \   00000020   9478               SEI
     51            
     52            while(1){
     53              //если зафиксировано нажатие, 
     54              //отправить код кнопки в терминал
     55              key = GetKey();
   \                     ??main_0:
   \   00000022   ....               RCALL   GetKey
   \   00000024   2F80               MOV     R24, R16
     56              if (key)
   \   00000026   2388               TST     R24
   \   00000028   F3E1               BREQ    ??main_0
     57                USART_SendChar(key);
   \   0000002A   2F08               MOV     R16, R24
   \   0000002C   ....               RCALL   USART_SendChar
   \   0000002E   CFF9               RJMP    ??main_0
   \   00000030                      REQUIRE _A_UBRRL
   \   00000030                      REQUIRE _A_UCSRB
   \   00000030                      REQUIRE _A_UBRRH
   \   00000030                      REQUIRE _A_TCNT0
   \   00000030                      REQUIRE _A_TCCR0
   \   00000030                      REQUIRE _A_TIMSK
     58            }
     59            return 0;
     60          }

   \                                 In  segment INTVEC, offset 0x12, root
   \                     `??Timer0Ovf??INTVEC 18`:
   \   00000012   ....               RJMP    Timer0Ovf
     61          

   Maximum stack usage in bytes:

     Function            CSTACK RSTACK
     --------            ------ ------
     Timer0Ovf              15      2
       -> ScanKeyboard      15      2
     USART_SendChar          0      2
     main                    1      2
       -> InitKeyboard       1      2
       -> GetKey             1      2
       -> USART_SendChar     1      2


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     _A_UBRRL                  1
     _A_UCSRB                  1
     _A_UCSRA                  1
     _A_UDR                    1
     _A_UBRRH                  1
     _A_TCNT0                  1
     _A_TCCR0                  1
     _A_TIMSK                  1
     ??USART_SendChar_0        8
     Timer0Ovf                72
     main                     48
     ??Timer0Ovf??INTVEC 18    2

 
   8 bytes in segment ABSOLUTE
 128 bytes in segment CODE
   2 bytes in segment INTVEC
 
 128 bytes of CODE memory (+ 2 bytes shared)
   0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: 1
