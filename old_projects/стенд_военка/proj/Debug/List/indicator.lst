###############################################################################
#                                                                             #
#                                                       04/Dec/2012  22:39:15 #
# IAR C/C++ Compiler V6.11.1.20453, Evaluation Version  for Atmel AVR         #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\admin\Documents\proj\indicator.c                #
#    Command line =  C:\Users\admin\Documents\proj\indicator.c --cpu=m8 -mt   #
#                    -o C:\Users\admin\Documents\proj\Debug\Obj\ -lCN         #
#                    C:\Users\admin\Documents\proj\Debug\List\                #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -Ol                             #
#    List file    =  C:\Users\admin\Documents\proj\Debug\List\indicator.lst   #
#    Object file  =  C:\Users\admin\Documents\proj\Debug\Obj\indicator.r90    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\admin\Documents\proj\indicator.c
      1          #include "indicator.h"

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
      2          

   \                                 In  segment TINY_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_I>`
      3          unsigned char number[] = 
   \                     number:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for number>`
      4          {
      5            0x3f, //0
      6            0x06, //1
      7            0x5b, //2
      8            0x4f, //3   
      9            0x66, //4
     10            0x6d, //5 
     11            0x7d, //6
     12            0x07, //7   
     13            0x7f, //8
     14            0x6f  //9    
     15          };
     16          

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     17          volatile  unsigned char data[2];
   \                     data:
   \   00000000                      DS8 2
     18          

   \                                 In  segment CODE, align 2, keep-with-next
     19          void IND_Init(void)
   \                     IND_Init:
     20          {
     21            //порт, к которому подкл. сегменты
     22            PORT_IND = 0xff;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   BB08               OUT     0x18, R16
     23            DDR_IND = 0xff;
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB07               OUT     0x17, R16
     24            
     25            //порт, к которому подкл. катод
     26            PORT_K &= ~((1<<KAT2)|(1<<KAT1));
   \   00000008   B302               IN      R16, 0x12
   \   0000000A   7F0C               ANDI    R16, 0xFC
   \   0000000C   BB02               OUT     0x12, R16
     27            DDR_K |= (1<<KAT2)|(1<<KAT1); 
   \   0000000E   B301               IN      R16, 0x11
   \   00000010   6003               ORI     R16, 0x03
   \   00000012   BB01               OUT     0x11, R16
     28          
     29             data[0] = 0;
   \   00000014   E000               LDI     R16, 0
   \   00000016   9300....           STS     data, R16
     30             data[1] = 0;
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   9300....           STS     (data + 1), R16
     31          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_PORTB
   \   00000022                      REQUIRE _A_DDRB
   \   00000022                      REQUIRE _A_PORTD
   \   00000022                      REQUIRE _A_DDRD
     32          

   \                                 In  segment CODE, align 2, keep-with-next
     33          void IND_Conv(unsigned char value)
   \                     IND_Conv:
     34          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
     35            unsigned char tmp;
     36            tmp = value % 10;
   \   00000004   E04A               LDI     R20, 10
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   ?UC_DIVMOD_L01
   \   0000000A   2F04               MOV     R16, R20
     37            data[0] =  number[tmp];
   \   0000000C   2FE0               MOV     R30, R16
   \   0000000E   ....               SUBI    R30, (-(number) & 0xFF)
   \   00000010   E0F0               LDI     R31, 0
   \   00000012   8100               LD      R16, Z
   \   00000014   9300....           STS     data, R16
     38            tmp = value/10;
   \   00000018   E04A               LDI     R20, 10
   \   0000001A   2F08               MOV     R16, R24
   \   0000001C   ....               RCALL   ?UC_DIVMOD_L01
     39            data[1] =  number[tmp];
   \   0000001E   2FE0               MOV     R30, R16
   \   00000020   ....               SUBI    R30, (-(number) & 0xFF)
   \   00000022   E0F0               LDI     R31, 0
   \   00000024   8100               LD      R16, Z
   \   00000026   9300....           STS     (data + 1), R16
     40          }
   \   0000002A   9189               LD      R24, Y+
   \   0000002C   9508               RET
     41          

   \                                 In  segment CODE, align 2, keep-with-next
     42          void IND_Update(void)
   \                     IND_Update:
     43          {
     44             static unsigned char count = 0;
     45          
     46             PORT_K &= ~((1<<KAT2)|(1<<KAT1));
   \   00000000   B302               IN      R16, 0x12
   \   00000002   7F0C               ANDI    R16, 0xFC
   \   00000004   BB02               OUT     0x12, R16
     47             PORT_IND = data[count];   
   \   00000006   9100....           LDS     R16, ??count
   \   0000000A   2FE0               MOV     R30, R16
   \   0000000C   ....               SUBI    R30, (-(data) & 0xFF)
   \   0000000E   E0F0               LDI     R31, 0
   \   00000010   8100               LD      R16, Z
   \   00000012   BB08               OUT     0x18, R16
     48             
     49             if (count == 0) PORT_K |= (1<<KAT1);
   \   00000014   9100....           LDS     R16, ??count
   \   00000018   2300               TST     R16
   \   0000001A   F409               BRNE    ??IND_Update_0
   \   0000001C   9A90               SBI     0x12, 0x00
     50             if (count == 1) PORT_K |= (1<<KAT2);
   \                     ??IND_Update_0:
   \   0000001E   9100....           LDS     R16, ??count
   \   00000022   3001               CPI     R16, 1
   \   00000024   F409               BRNE    ??IND_Update_1
   \   00000026   9A91               SBI     0x12, 0x01
     51                
     52              count++;
   \                     ??IND_Update_1:
   \   00000028   9100....           LDS     R16, ??count
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     ??count, R16
     53              if (count == 2) count = 0;
   \   00000032   9100....           LDS     R16, ??count
   \   00000036   3002               CPI     R16, 2
   \   00000038   F419               BRNE    ??IND_Update_2
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   9300....           STS     ??count, R16
     54          }
   \                     ??IND_Update_2:
   \   00000040   9508               RET
   \   00000042                      REQUIRE _A_PORTD
   \   00000042                      REQUIRE _A_PORTB

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
   \                     ??count:
   \   00000000                      DS8 1

   \                                 In  segment TINY_ID, align 1, keep-with-next
   \                     `?<Initializer for number>`:
   \   00000000   063F4F5B6D66       DC8 63, 6, 91, 79, 102, 109, 125, 7, 127, 111
   \              077D6F7F    

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       1      4  IND_Conv
       0      2  IND_Init
       0      2  IND_Update


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Initializer for number>
      46  IND_Conv
      34  IND_Init
      66  IND_Update
       1  _A_DDRB
       1  _A_DDRD
       1  _A_PORTB
       1  _A_PORTD
       1  count
       2  data
      10  number
      12  -- Other

 
   4 bytes in segment ABSOLUTE
 146 bytes in segment CODE
  12 bytes in segment INITTAB
  10 bytes in segment TINY_I
  10 bytes in segment TINY_ID
   3 bytes in segment TINY_Z
 
 156 bytes of CODE memory (+ 12 bytes shared)
  13 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
